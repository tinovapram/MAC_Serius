// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps
`default_nettype wire

(* CORE_GENERATION_INFO="test,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.101600,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=427,HLS_SYN_LUT=847,HLS_VERSION=2019_1}" *)

module test (
           ap_clk,
           ap_rst_n,
           txOut_din,
           txOut_full_n,
           txOut_write,
           rxIn_dout,
           rxIn_empty_n,
           rxIn_read,
           ap_return,
           s_axi_AXILiteS_AWVALID,
           s_axi_AXILiteS_AWREADY,
           s_axi_AXILiteS_AWADDR,
           s_axi_AXILiteS_WVALID,
           s_axi_AXILiteS_WREADY,
           s_axi_AXILiteS_WDATA,
           s_axi_AXILiteS_WSTRB,
           s_axi_AXILiteS_ARVALID,
           s_axi_AXILiteS_ARREADY,
           s_axi_AXILiteS_ARADDR,
           s_axi_AXILiteS_RVALID,
           s_axi_AXILiteS_RREADY,
           s_axi_AXILiteS_RDATA,
           s_axi_AXILiteS_RRESP,
           s_axi_AXILiteS_BVALID,
           s_axi_AXILiteS_BREADY,
           s_axi_AXILiteS_BRESP
       );

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_pp0_stage0 = 14'd8;
parameter    ap_ST_fsm_state7 = 14'd16;
parameter    ap_ST_fsm_state8 = 14'd32;
parameter    ap_ST_fsm_state9 = 14'd64;
parameter    ap_ST_fsm_state10 = 14'd128;
parameter    ap_ST_fsm_state11 = 14'd256;
parameter    ap_ST_fsm_state12 = 14'd512;
parameter    ap_ST_fsm_state13 = 14'd1024;
parameter    ap_ST_fsm_state14 = 14'd2048;
parameter    ap_ST_fsm_state15 = 14'd4096;
parameter    ap_ST_fsm_state16 = 14'd8192;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 13;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [7:0] txOut_din;
input   txOut_full_n;
output   txOut_write;
input  [7:0] rxIn_dout;
input   rxIn_empty_n;
output   rxIn_read;
output  [0:0] ap_return;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg[7:0] txOut_din;
reg txOut_write;
reg rxIn_read;

reg    ap_rst_n_inv;
reg   [8:0] txReg_address0;
reg    txReg_ce0;
reg    txReg_we0;
reg   [31:0] txReg_d0;
wire   [31:0] txReg_q0;
reg   [8:0] rxReg_address0;
reg    rxReg_ce0;
reg    rxReg_we0;
reg   [31:0] rxReg_d0;
wire   [31:0] rxReg_q0;
reg   [1:0] txState;
reg   [1:0] rxState;
reg    txOut_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln28_reg_574;
reg   [0:0] icmp_ln28_reg_574_pp0_iter1_reg;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state12;
reg    rxIn_blk_n;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln47_fu_365_p2;
reg   [0:0] trunc_ln46_reg_601;
reg   [15:0] i_0_reg_192;
reg   [31:0] reg_252;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state1;
wire   [1:0] txState_load_load_fu_256_p1;
reg   [1:0] txState_load_reg_555;
wire   [8:0] txReg_addr_2_reg_559;
wire   [15:0] empty_8_fu_260_p1;
reg   [15:0] empty_8_reg_564;
wire   [8:0] txReg_addr_1_gep_fu_136_p3;
wire   [0:0] icmp_ln28_fu_283_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] i_fu_288_p2;
reg   [15:0] i_reg_578;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] lshr_ln29_fu_335_p2;
reg   [7:0] lshr_ln29_reg_588;
wire   [8:0] txReg_addr_4_gep_fu_153_p3;
wire   [8:0] txReg_addr_4_reg_593;
wire    ap_CS_fsm_state7;
wire   [0:0] trunc_ln46_fu_357_p1;
wire   [15:0] empty_10_fu_361_p1;
reg   [15:0] empty_10_reg_605;
reg    ap_predicate_op99_read_state10;
reg    ap_block_state10;
wire   [15:0] i_1_fu_370_p2;
reg   [15:0] i_1_reg_614;
wire   [1:0] rxState_load_load_fu_410_p1;
reg   [1:0] rxState_load_reg_624;
wire   [8:0] rxReg_addr_reg_628;
wire   [31:0] zext_ln68_fu_414_p1;
reg   [31:0] zext_ln68_reg_633;
wire   [7:0] lshr_ln48_fu_456_p2;
reg   [7:0] lshr_ln48_reg_641;
wire    ap_CS_fsm_state11;
wire   [15:0] i_2_fu_475_p2;
reg   [15:0] i_2_reg_649;
wire    ap_CS_fsm_state14;
reg   [8:0] rxReg_addr_1_reg_654;
wire   [0:0] icmp_ln67_fu_469_p2;
wire   [15:0] select_ln70_fu_536_p3;
wire    ap_CS_fsm_state15;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg   [15:0] ap_phi_mux_i_0_phi_fu_196_p4;
reg   [15:0] i1_0_reg_204;
reg   [15:0] rxLenght_0_reg_216;
reg   [15:0] i2_0_reg_228;
wire   [63:0] zext_ln29_fu_304_p1;
wire   [63:0] zext_ln48_fu_386_p1;
wire   [63:0] zext_ln68_2_fu_491_p1;
wire    ap_CS_fsm_state8;
wire   [0:0] trunc_ln22_fu_347_p1;
wire   [0:0] icmp_ln60_fu_418_p2;
wire    ap_CS_fsm_state16;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state3;
wire   [31:0] and_ln_fu_274_p3;
wire   [31:0] and_ln1_fu_401_p3;
wire    ap_CS_fsm_state13;
wire   [31:0] or_ln80_fu_462_p2;
wire   [31:0] and_ln68_fu_523_p2;
wire   [30:0] tmp_3_fu_264_p4;
wire   [13:0] lshr_ln_fu_294_p4;
wire   [1:0] trunc_ln29_1_fu_313_p1;
wire   [4:0] shl_ln_fu_317_p3;
wire   [4:0] xor_ln29_fu_325_p2;
wire   [7:0] trunc_ln29_fu_309_p1;
wire   [7:0] zext_ln29_1_fu_331_p1;
wire   [13:0] lshr_ln1_fu_376_p4;
wire   [30:0] tmp_6_fu_391_p4;
wire   [1:0] trunc_ln48_1_fu_434_p1;
wire   [4:0] shl_ln1_fu_438_p3;
wire   [4:0] xor_ln48_fu_446_p2;
wire   [7:0] trunc_ln48_fu_430_p1;
wire   [7:0] zext_ln48_1_fu_452_p1;
wire   [13:0] lshr_ln2_fu_481_p4;
wire   [1:0] trunc_ln68_fu_496_p1;
wire   [4:0] shl_ln2_fu_500_p3;
wire   [4:0] xor_ln68_fu_508_p2;
wire   [31:0] zext_ln68_1_fu_514_p1;
wire   [31:0] shl_ln68_fu_518_p2;
wire   [0:0] icmp_ln70_fu_530_p2;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
    #0 txState = 2'd0;
    #0 rxState = 2'd0;
    #0 ap_enable_reg_pp0_iter2 = 1'b0;
    #0 ap_CS_fsm = 14'd1;
    #0 ap_enable_reg_pp0_iter0 = 1'b0;
    #0 ap_enable_reg_pp0_iter1 = 1'b0;
end

test_AXILiteS_s_axi #(
                        .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
                        .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
                    test_AXILiteS_s_axi_U(
                        .AWVALID(s_axi_AXILiteS_AWVALID),
                        .AWREADY(s_axi_AXILiteS_AWREADY),
                        .AWADDR(s_axi_AXILiteS_AWADDR),
                        .WVALID(s_axi_AXILiteS_WVALID),
                        .WREADY(s_axi_AXILiteS_WREADY),
                        .WDATA(s_axi_AXILiteS_WDATA),
                        .WSTRB(s_axi_AXILiteS_WSTRB),
                        .ARVALID(s_axi_AXILiteS_ARVALID),
                        .ARREADY(s_axi_AXILiteS_ARREADY),
                        .ARADDR(s_axi_AXILiteS_ARADDR),
                        .RVALID(s_axi_AXILiteS_RVALID),
                        .RREADY(s_axi_AXILiteS_RREADY),
                        .RDATA(s_axi_AXILiteS_RDATA),
                        .RRESP(s_axi_AXILiteS_RRESP),
                        .BVALID(s_axi_AXILiteS_BVALID),
                        .BREADY(s_axi_AXILiteS_BREADY),
                        .BRESP(s_axi_AXILiteS_BRESP),
                        .ACLK(ap_clk),
                        .ARESET(ap_rst_n_inv),
                        .ACLK_EN(1'b1),
                        .txReg_address0(txReg_address0),
                        .txReg_ce0(txReg_ce0),
                        .txReg_we0(txReg_we0),
                        .txReg_d0(txReg_d0),
                        .txReg_q0(txReg_q0),
                        .rxReg_address0(rxReg_address0),
                        .rxReg_ce0(rxReg_ce0),
                        .rxReg_we0(rxReg_we0),
                        .rxReg_d0(rxReg_d0),
                        .rxReg_q0(rxReg_q0)
                    );

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end
    else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end
    else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end
        else if (((1'b1 == ap_CS_fsm_state2) & (txState_load_load_fu_256_p1 == 2'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end
    else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end
            else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end
    else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
        else if (((1'b1 == ap_CS_fsm_state2) & (txState_load_load_fu_256_p1 == 2'd1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((txOut_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        i1_0_reg_204 <= i_1_reg_614;
    end
    else if (((trunc_ln46_fu_357_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i1_0_reg_204 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10) & (((trunc_ln46_reg_601 == 1'd0) & (rxState_load_load_fu_410_p1 == 2'd1)) | ((icmp_ln47_fu_365_p2 == 1'd1) & (rxState_load_load_fu_410_p1 == 2'd1))))) begin
        i2_0_reg_228 <= 16'd0;
    end
    else if ((1'b1 == ap_CS_fsm_state15)) begin
        i2_0_reg_228 <= i_2_reg_649;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_reg_574 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_192 <= i_reg_578;
    end
    else if (((1'b1 == ap_CS_fsm_state2) & (txState_load_load_fu_256_p1 == 2'd1))) begin
        i_0_reg_192 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10) & (((trunc_ln46_reg_601 == 1'd0) & (rxState_load_load_fu_410_p1 == 2'd1)) | ((icmp_ln47_fu_365_p2 == 1'd1) & (rxState_load_load_fu_410_p1 == 2'd1))))) begin
        rxLenght_0_reg_216 <= 16'd1540;
    end
    else if ((1'b1 == ap_CS_fsm_state15)) begin
        rxLenght_0_reg_216 <= select_ln70_fu_536_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (rxState_load_reg_624 == 2'd1))) begin
        rxState <= 2'd3;
    end
    else if ((~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10) & (((icmp_ln60_fu_418_p2 == 1'd1) & (trunc_ln46_reg_601 == 1'd0) & (rxState_load_load_fu_410_p1 == 2'd0)) | ((icmp_ln60_fu_418_p2 == 1'd1) & (icmp_ln47_fu_365_p2 == 1'd1) & (rxState_load_load_fu_410_p1 == 2'd0))))) begin
        rxState <= 2'd1;
    end
    else if (((~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10) & (((trunc_ln46_reg_601 == 1'd0) & (rxState_load_load_fu_410_p1 == 2'd2)) | ((icmp_ln47_fu_365_p2 == 1'd1) & (rxState_load_load_fu_410_p1 == 2'd2)))) | (~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10) & (((trunc_ln46_reg_601 == 1'd0) & (rxState_load_load_fu_410_p1 == 2'd3)) | ((icmp_ln47_fu_365_p2 == 1'd1) & (rxState_load_load_fu_410_p1 == 2'd3)))))) begin
        rxState <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln22_fu_347_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        txState <= 2'd1;
    end
    else if (((1'b1 == ap_CS_fsm_state7) & (txState_load_reg_555 == 2'd1))) begin
        txState <= 2'd3;
    end
    else if ((((1'b1 == ap_CS_fsm_state2) & (txState_load_load_fu_256_p1 == 2'd2)) | ((1'b1 == ap_CS_fsm_state2) & (txState_load_load_fu_256_p1 == 2'd3)))) begin
        txState <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln46_fu_357_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        empty_10_reg_605 <= empty_10_fu_361_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (txState_load_load_fu_256_p1 == 2'd1))) begin
        empty_8_reg_564 <= empty_8_fu_260_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (trunc_ln46_reg_601 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_1_reg_614 <= i_1_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_2_reg_649 <= i_2_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_578 <= i_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln28_reg_574 <= icmp_ln28_fu_283_p2;
        icmp_ln28_reg_574_pp0_iter1_reg <= icmp_ln28_reg_574;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_reg_574 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln29_reg_588 <= lshr_ln29_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        lshr_ln48_reg_641 <= lshr_ln48_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_252 <= txReg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_469_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        rxReg_addr_1_reg_654 <= zext_ln68_2_fu_491_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10) & ((icmp_ln47_fu_365_p2 == 1'd1) | (trunc_ln46_reg_601 == 1'd0)))) begin
        rxState_load_reg_624 <= rxState;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln46_reg_601 <= trunc_ln46_fu_357_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        txState_load_reg_555 <= txState;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10) & (((trunc_ln46_reg_601 == 1'd0) & (rxState_load_load_fu_410_p1 == 2'd1)) | ((icmp_ln47_fu_365_p2 == 1'd1) & (rxState_load_load_fu_410_p1 == 2'd1))))) begin
        zext_ln68_reg_633[7 : 0] <= zext_ln68_fu_414_p1[7 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln28_fu_283_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end
    else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end
    else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_574 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_196_p4 = i_reg_578;
    end
    else begin
        ap_phi_mux_i_0_phi_fu_196_p4 = i_0_reg_192;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & ((icmp_ln47_fu_365_p2 == 1'd1) | (trunc_ln46_reg_601 == 1'd0)))) begin
        rxIn_blk_n = rxIn_empty_n;
    end
    else begin
        rxIn_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (ap_predicate_op99_read_state10 == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        rxIn_read = 1'b1;
    end
    else begin
        rxIn_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        rxReg_address0 = rxReg_addr_1_reg_654;
    end
    else if ((1'b1 == ap_CS_fsm_state14)) begin
        rxReg_address0 = zext_ln68_2_fu_491_p1;
    end
    else if ((1'b1 == ap_CS_fsm_state13)) begin
        rxReg_address0 = rxReg_addr_reg_628;
    end
    else if ((1'b1 == ap_CS_fsm_state10)) begin
        rxReg_address0 = 64'd510;
    end
    else begin
        rxReg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10)))) begin
        rxReg_ce0 = 1'b1;
    end
    else begin
        rxReg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        rxReg_d0 = and_ln68_fu_523_p2;
    end
    else if ((1'b1 == ap_CS_fsm_state13)) begin
        rxReg_d0 = or_ln80_fu_462_p2;
    end
    else begin
        rxReg_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15))) begin
        rxReg_we0 = 1'b1;
    end
    else begin
        rxReg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((icmp_ln28_reg_574_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        txOut_blk_n = txOut_full_n;
    end
    else begin
        txOut_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((txOut_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        txOut_din = lshr_ln48_reg_641;
    end
    else if (((icmp_ln28_reg_574_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        txOut_din = lshr_ln29_reg_588;
    end
    else begin
        txOut_din = 'bx;
    end
end

always @ (*) begin
    if ((((txOut_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln28_reg_574_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        txOut_write = 1'b1;
    end
    else begin
        txOut_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln46_reg_601 == 1'd1) & (icmp_ln47_fu_365_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        txReg_address0 = txReg_addr_4_reg_593;
    end
    else if (((trunc_ln46_reg_601 == 1'd1) & (icmp_ln47_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        txReg_address0 = zext_ln48_fu_386_p1;
    end
    else if ((1'b1 == ap_CS_fsm_state7)) begin
        txReg_address0 = txReg_addr_4_gep_fu_153_p3;
    end
    else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        txReg_address0 = zext_ln29_fu_304_p1;
    end
    else if ((1'b1 == ap_CS_fsm_state3)) begin
        txReg_address0 = txReg_addr_2_reg_559;
    end
    else if (((txState_load_load_fu_256_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        txReg_address0 = txReg_addr_1_gep_fu_136_p3;
    end
    else if (((1'b1 == ap_CS_fsm_state2) & (txState_load_load_fu_256_p1 == 2'd3))) begin
        txReg_address0 = 64'd510;
    end
    else if ((1'b1 == ap_CS_fsm_state1)) begin
        txReg_address0 = 64'd511;
    end
    else begin
        txReg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state1) | (~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (trunc_ln46_reg_601 == 1'd1) & (icmp_ln47_fu_365_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | (~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (trunc_ln46_reg_601 == 1'd1) & (icmp_ln47_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((txState_load_load_fu_256_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state2) & (txState_load_load_fu_256_p1 == 2'd3)))) begin
        txReg_ce0 = 1'b1;
    end
    else begin
        txReg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln46_reg_601 == 1'd1) & (icmp_ln47_fu_365_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        txReg_d0 = and_ln1_fu_401_p3;
    end
    else if ((1'b1 == ap_CS_fsm_state3)) begin
        txReg_d0 = and_ln_fu_274_p3;
    end
    else begin
        txReg_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (trunc_ln46_reg_601 == 1'd1) & (icmp_ln47_fu_365_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)))) begin
        txReg_we0 = 1'b1;
    end
    else begin
        txReg_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (txState_load_load_fu_256_p1 == 2'd2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
            else if (((1'b1 == ap_CS_fsm_state2) & (txState_load_load_fu_256_p1 == 2'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
            else if (((txState_load_load_fu_256_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
            else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln28_fu_283_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
            else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln28_fu_283_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
            else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10) & ((~(rxState_load_load_fu_410_p1 == 2'd1) & ~(rxState_load_load_fu_410_p1 == 2'd3) & (trunc_ln46_reg_601 == 1'd0)) | (~(rxState_load_load_fu_410_p1 == 2'd1) & ~(rxState_load_load_fu_410_p1 == 2'd3) & (icmp_ln47_fu_365_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
            else if ((~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10) & (((trunc_ln46_reg_601 == 1'd0) & (rxState_load_load_fu_410_p1 == 2'd1)) | ((icmp_ln47_fu_365_p2 == 1'd1) & (rxState_load_load_fu_410_p1 == 2'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
            else if ((~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10) & (((trunc_ln46_reg_601 == 1'd0) & (rxState_load_load_fu_410_p1 == 2'd3)) | ((icmp_ln47_fu_365_p2 == 1'd1) & (rxState_load_load_fu_410_p1 == 2'd3))))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
            else if ((~((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0)) & (trunc_ln46_reg_601 == 1'd1) & (icmp_ln47_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
            else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((txOut_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
            else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln67_fu_469_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
            else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln1_fu_401_p3 = {{tmp_6_fu_391_p4}, {1'd0}};

assign and_ln68_fu_523_p2 = (shl_ln68_fu_518_p2 & rxReg_q0);

assign and_ln_fu_274_p3 = {{tmp_3_fu_264_p4}, {1'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln28_reg_574_pp0_iter1_reg == 1'd0) & (txOut_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln28_reg_574_pp0_iter1_reg == 1'd0) & (txOut_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln28_reg_574_pp0_iter1_reg == 1'd0) & (txOut_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state10 = ((ap_predicate_op99_read_state10 == 1'b1) & (rxIn_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = ((icmp_ln28_reg_574_pp0_iter1_reg == 1'd0) & (txOut_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op99_read_state10 = ((icmp_ln47_fu_365_p2 == 1'd1) | (trunc_ln46_reg_601 == 1'd0));
end

assign ap_return = 1'd0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_10_fu_361_p1 = reg_252[15:0];

assign empty_8_fu_260_p1 = txReg_q0[15:0];

assign i_1_fu_370_p2 = (i1_0_reg_204 + 16'd1);

assign i_2_fu_475_p2 = (i2_0_reg_228 + 16'd1);

assign i_fu_288_p2 = (ap_phi_mux_i_0_phi_fu_196_p4 + 16'd1);

assign icmp_ln28_fu_283_p2 = ((ap_phi_mux_i_0_phi_fu_196_p4 == empty_8_reg_564) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_365_p2 = ((i1_0_reg_204 == empty_10_reg_605) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_418_p2 = ((rxIn_dout == 8'd85) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_469_p2 = ((i2_0_reg_228 < rxLenght_0_reg_216) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_530_p2 = ((i2_0_reg_228 == 16'd4) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_376_p4 = {{i1_0_reg_204[15:2]}};

assign lshr_ln29_fu_335_p2 = trunc_ln29_fu_309_p1 >> zext_ln29_1_fu_331_p1;

assign lshr_ln2_fu_481_p4 = {{i2_0_reg_228[15:2]}};

assign lshr_ln48_fu_456_p2 = trunc_ln48_fu_430_p1 >> zext_ln48_1_fu_452_p1;

assign lshr_ln_fu_294_p4 = {{ap_phi_mux_i_0_phi_fu_196_p4[15:2]}};

assign or_ln80_fu_462_p2 = (rxReg_q0 | 32'd1);

assign rxReg_addr_reg_628 = 64'd510;

assign rxState_load_load_fu_410_p1 = rxState;

assign select_ln70_fu_536_p3 = ((icmp_ln70_fu_530_p2[0:0] === 1'b1) ? 16'd0 : rxLenght_0_reg_216);

assign shl_ln1_fu_438_p3 = {{trunc_ln48_1_fu_434_p1}, {3'd0}};

assign shl_ln2_fu_500_p3 = {{trunc_ln68_fu_496_p1}, {3'd0}};

assign shl_ln68_fu_518_p2 = zext_ln68_reg_633 << zext_ln68_1_fu_514_p1;

assign shl_ln_fu_317_p3 = {{trunc_ln29_1_fu_313_p1}, {3'd0}};

assign tmp_3_fu_264_p4 = {{txReg_q0[31:1]}};

assign tmp_6_fu_391_p4 = {{reg_252[31:1]}};

assign trunc_ln22_fu_347_p1 = txReg_q0[0:0];

assign trunc_ln29_1_fu_313_p1 = i_0_reg_192[1:0];

assign trunc_ln29_fu_309_p1 = txReg_q0[7:0];

assign trunc_ln46_fu_357_p1 = txReg_q0[0:0];

assign trunc_ln48_1_fu_434_p1 = i1_0_reg_204[1:0];

assign trunc_ln48_fu_430_p1 = txReg_q0[7:0];

assign trunc_ln68_fu_496_p1 = i2_0_reg_228[1:0];

assign txReg_addr_1_gep_fu_136_p3 = 64'd510;

assign txReg_addr_2_reg_559 = 64'd510;

assign txReg_addr_4_gep_fu_153_p3 = 64'd510;

assign txReg_addr_4_reg_593 = 64'd510;

assign txState_load_load_fu_256_p1 = txState;

assign xor_ln29_fu_325_p2 = (shl_ln_fu_317_p3 ^ 5'd24);

assign xor_ln48_fu_446_p2 = (shl_ln1_fu_438_p3 ^ 5'd24);

assign xor_ln68_fu_508_p2 = (shl_ln2_fu_500_p3 ^ 5'd24);

assign zext_ln29_1_fu_331_p1 = xor_ln29_fu_325_p2;

assign zext_ln29_fu_304_p1 = lshr_ln_fu_294_p4;

assign zext_ln48_1_fu_452_p1 = xor_ln48_fu_446_p2;

assign zext_ln48_fu_386_p1 = lshr_ln1_fu_376_p4;

assign zext_ln68_1_fu_514_p1 = xor_ln68_fu_508_p2;

assign zext_ln68_2_fu_491_p1 = lshr_ln2_fu_481_p4;

assign zext_ln68_fu_414_p1 = rxIn_dout;

always @ (posedge ap_clk) begin
    zext_ln68_reg_633[31:8] <= 24'b000000000000000000000000;
end

endmodule //test
